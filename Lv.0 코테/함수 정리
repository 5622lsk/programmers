1. 올림 처리: Math.ceil(1.43) => 2

2.내림 처림: Math.floor(1.7) => 1
            ~~(1.7) => 1

3.반올림: Math.round(2.5) => 3

4.parseInt: 소수점 이하 제거. parseInt(1.43) => 1

/ (나눗셈 연산자) 
% (나눗셈 연산자)

function 최대공약수(a, b) {
    while (b !== 0) {
        let t = b;
        b = a % b;
        a = t;
    }
    return a;
}

5. while(true)는 무한 반복을 의미. 이 반복문은 조건이 만족될 때까지 계속 실행.

6. numbers배열의 합 구하기
const sum = numbers.reduce((acc, curr) => acc + curr)

7.배열 뒤집기: reverse() 메소드는 배열의 원소 순서를 뒤집습니다.
array=[1,2,3,4]
array.reverse();

8.문자열을 배열로:
    -split(''): 문자열.split('')
     my_string.split('p') (my_string = "apple"일 경우)
     결과:["a","le"]

    -스프레드 문법: [...문자열] 문자열을 배열로

                 [...array] 배열의 복사나 결합을 위해
                 (...array) 함수 호출 시 개별 인수로 전달하기 위해 

9.문자열 대치 함수: my_string.replaceAll("p", "") 
                결과: "ale"

10.배열을 문자열로:
    join(''): 배열.join('')

11.map 함수: 각 문자를 n번 반복하여 새로운 배열 생성.
            map(v => v.repeat(2))
            결과: [aa,bb,cc]
            배열.map(Number) => 문자열을 숫자로 변환.

12.reduce 함수: 각 문자를 n번 반복하여 누적된 문자열에 추가.
                reduce((acc,cur)=>acc+cur.repeat(2),'')
                결과: aabbcc

13.틸드문법 ~~: 소숫점 아래는 버림.
                ~~(-5.8)는 -5를 반환.
                ~~7는 7을 반환합니다.

14.filter : 배열의 각 요소에서 조건을 만족하는 요소들로 이루어진 배열 반환.
            array.filter((v)=> !isNaN(v));

15.slice(start, end+1): 해당 범위의 배열 추출.
    (end + 1은 slice 메서드가 종료 인덱스를 포함하지 않기 때문)

    arr.slice(): 인수 없이 호출되면 배열의 복사본 반환.

16.Number(): 문자열을 숫자로 변환.
              Number('548') => 548

17.isNaN(): 주어진 값이 숫자인지 판별
            isNaN(123) => false
            isNaN('123') => false
            isNaN("") => false //빈문자열은 0
            isNaN(사과) => true
            

18. 문자열 순회 구문
    const my_string = "hi"; 
    for (let char of my_string) {
    console.log(char);
    }
    // 출력:
    // h
    // i

19. toLowerCase(): 문자열 내의 대문자를 소문자로 변환
                    string.toLowerCase()

20. toUpperCase(): 문자열 내의 소문자를 대문자로 변환
                    string.toUpperCase()

21. indexOf('하이'): '하이'가 몇번째 인덱스인지 반환.

22. Math.max(): 인수들 중 가장 큰수 반환. 배열을 직접 인수로 받아들일 수 없기 때문에 꼭 인수로 변환해야됨.

23. String(23): 문자열로 변환. 결과: '23'
    =toString()

24. sort: 배열 요소 정렬
    오름차순 정렬: numbers.sort((a, b) => a - b)
    내림차순 정렬: numbers.sort((a, b) => b - a)

25. isInteger(): 정수인지 여부를 확인
    isInteger(4)   // true
    isInteger(4.5)  // false
    isInteger('4')  // false

26. Math.sqrt(25): 제곱근 반환. // 5

27.includes(): 배열이나 문자열에서 특정 요소나 문자열이 포함되어 있는지 확인.
    const str = "Hello, world!";   
    console.log(str.includes("world"));   // true
    console.log(str.includes("world", 8));// false (인덱스 8부터 검색 시작)


29. Math.pow(a,b) : a의b제곱 연산.
    = a**b

30. Math.abs(): 절대값 반환.

30.splice(시작인덱스, 제거할 요소 수, (생략가능)추가할요소1,추가할요소2,...): 배열의 기존 요소를 삭제, 교체하거나 새 요소를 추가하여 반환.

31.배열 조작 메소드(shift, push, pop, unshift)
    -shift(): 배열의 첫 번째 요소를 제거,제거된 요소를 반환.
        [1, 2, 3].shift() 호출 시 결과는 1이며, 배열은 이제 [2, 3]

    -pop(): 배열의 마지막 요소를 제거하고, 제거된 요소를 반환.
        [1, 2, 3].pop() 호출 시 결과는 3이며, 배열은 이제 [1, 2]

    -unshift(): 배열의 시작 부분에 하나 이상의 요소를 추가하고, 새 배열의 길이를 반환.
        [1, 2].unshift(0) 호출 시 배열은 [0, 1, 2]이 되며, 반환값은 3


32. Set 객체: 중복되지 않는 값들을 저장할 수 있는 객체
    const mySet = new Set();
    값 추가
    mySet.add(1);
    mySet.add(5);
    mySet.add(1);  // 중복된 값은 추가되지 않음

    값 확인
    console.log(mySet.has(1));  // true
    console.log(mySet.has(2));  // false

    값 삭제
    mySet.delete(5);
    console.log(mySet.has(5));  // false







//반복문//
forEach: 배열을 순회할 때 사용. 간결하고 가독성이 좋으나 반복을 중간에 종료할 수 없음.
for: 조건에 따라 반복해야 하는 모든 경우에 사용. 초기화, 조건 검사, 증감식을 명확하게 제어할 수 있으며, 중간에 반복을 종료할 수 있음.
while: 조건에 따라 반복해야 하는 경우에 사용. 조건에 따라 반복을 유연하게 제어할 수 있으며, 중간에 반복을 종료할 수 있음.
배열 순회 시 forEach가 간편할 수 있으며, 복잡한 조건이 있는 반복 작업에는 for 또는 while을 사용하는 것이 좋다.





